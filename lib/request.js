// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var athrow, base, decode, decode_json_obj, encode, iced, make_esc, request, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  base = require('request');

  make_esc = require('iced-error').make_esc;

  athrow = require('iced-utils').util.athrow;

  _ref = require('keybase-bjson-core'), encode = _ref.encode, decode_json_obj = _ref.decode_json_obj, decode = _ref.decode;

  exports.request = request = function(opts, cb) {
    var body, ct, e, enc, err, esc, inbody, obj, resp, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    err = null;
    decode = false;
    esc = make_esc(cb, "request");
    (function(_this) {
      return (function(__iced_k) {
        var _ref1, _ref2;
        if ((obj = (_ref1 = opts.arg) != null ? _ref1.data : void 0) != null) {
          decode = true;
          enc = (opts != null ? opts.arg.encoding : void 0) || 'json';
          _ref2 = (function() {
            switch (enc) {
              case 'json':
                return [
                  'application/json', encode({
                    obj: obj,
                    json: true
                  })
                ];
              case 'msgpack':
                return [
                  'application/x-msgpack', encode({
                    obj: obj,
                    msgpack: true,
                    encoding: 'binary'
                  })
                ];
              case 'msgpack-64':
                return [
                  'application/x-msgpack-64', encode({
                    obj: obj,
                    msgpack: true,
                    encoding: 'base64'
                  })
                ];
              default:
                return [null, null];
            }
          })(), ct = _ref2[0], inbody = _ref2[1];
          (function(__iced_k) {
            if (inbody == null) {
              err = new Error("Invalid encoding type: " + enc);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/node-bjson-client/src/request.iced"
                });
                athrow(err, esc(__iced_deferrals.defer({
                  lineno: 30
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              opts.encoding = null;
              opts.headers || (opts.headers = {});
              opts.headers['content-type'] = ct;
              return __iced_k(opts.headers['accept'] = "application/json; application/x-msgpack; application/x-msgpack-64");
            }
          })(function() {
            return __iced_k(opts.body = inbody);
          });
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/node-bjson-client/src/request.iced"
          });
          base(opts, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                resp = arguments[0];
                return body = arguments[1];
              };
            })(),
            lineno: 38
          })));
          __iced_deferrals._fulfill();
        })(function() {
          var _ref1;
          if (!decode) {

          } else if ((ct = (_ref1 = resp.headers['content-type']) != null ? _ref1.split("; ") : void 0) == null) {

          } else {
            try {
              body = (function() {
                switch (ct[0]) {
                  case "application/json":
                    return decode_json_obj(body);
                  case "application/x-msgpack":
                    return decode({
                      buf: body,
                      msgpack: true
                    });
                  case "application/x-msgpack-64":
                    return decode({
                      buf: body,
                      msgpack: true,
                      encoding: 'base64'
                    });
                  default:
                    return null;
                }
              })();
            } catch (_error) {
              e = _error;
              err = new Error("Error decoding output: " + e.message);
            }
          }
          return cb(err, resp, body);
        });
      };
    })(this));
  };

}).call(this);
